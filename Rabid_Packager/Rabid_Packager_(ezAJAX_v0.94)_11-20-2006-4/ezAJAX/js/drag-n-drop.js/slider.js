/** slider.js * Copyright 2004 Garrett Smith * http:// dhtmlkitchen.com * * requires: drag.js */  Slider = function(el, iDirection) {	this.id = el.id;	this.dir = iDirection;	this.value = 0;	this.rationalValue = 0;		this.handle = DragObj.getInstance(el, iDirection);	this.handle.keepInContainer = true;	this.handle.onbeforedragstart = function() { 		this.container.className += " scrollbar-track-active" 		return true; 	} 	 	Listener.add(this.handle, "ondragend", function() {			if(el.src) 				el.src = slider.lowSrc;			else 					removeClass(el, "focus"); 			removeClass(this.container, "scrollbar-track-active");			return true; 	}); 	 	this.trackbar = this.handle.container; 	var slider = this; 	 	if(el.src) { 		this.lowSrc = el.src; 		this.src= el.src.replace(TokenizedExps.EXT, "-focus$1"); 	} 	 	Listener.add(slider.handle, "onbeforedragstart", 		function() { 			slider.trackbar.className +=  " scrollbar-track-active"; 			if(el.src)  				el.src = slider.src; 			else	 			el.className += " focus"; 			return true; 	}); 	 	 	Listener.add(this.handle, "ondrag", this._onslide, this); 	Listener.add(this.handle, "ondragstop", this._onslide, this); 	 	this.tDist = ( this.dir == Slider.direction.VERT  		? (this.handle.getContainerHeight() - this.handle.el.offsetHeight)  			: (this.handle.getContainerWidth() - this.handle.el.offsetWidth)); 	 	Listener.add(this.trackbar, "onmousedown", 		this.trackbar.onmousedown = function(e) {						var target = getTarget(e);			if(target != this) return true;			if(!e) e = event;			else if(e.preventDefault)				e.preventDefault();							var slider = Sliders[this.getElementsByTagName("*")[0].id];						this.className += " scrollbar-track-active";			if(iDirection == Slider.direction.HORZ) {				var slideEndPos = e.layerX || e.offsetX;				if(slideEndPos > slider.handle.el.offsetLeft) {					slideEndPos -= slider.handle.el.offsetWidth;				}								// mac ie gets freaky!				if(ua.ie && !ua.winIE) 					slideEndPos = Math.min(slideEndPos + slider.handle.el.offsetLeft, this.offsetWidth - 						slider.handle.el.offsetWidth);								slider.handle.moveToX(slideEndPos);				if(slider.handle.onslide)					slider.handle.onslide();			}						else if(iDirection == Slider.direction.VERT) {				var slideEndPos = e.layerY || e.offsetY;				if(slideEndPos > slider.handle.el.offsetTop)					slideEndPos -= slider.handle.el.offsetHeight;										slider.handle.moveToY(slideEndPos);			}			slider.handle.ondrag();						return false;		 });	 	 this.trackbar.onmouseup = function() {			slider.handle.ondragend();	};};Sliders = { };Slider.getInstance = function(el, direction) {    var x = Sliders[el.id];    if(x == null)        x = Sliders[el.id] = new Slider(el, direction);    return x;};Slider.direction = {	HORZ : DragObj.constraints.HORZ,	VERT : DragObj.constraints.VERT};Slider.prototype = { 		rationalValue : 0,		slideToX : function(x) {		this.handle.moveToX(x);		// this is bad design.		this.handle.ondrag();	},		setValue : function(v) {		var h = this.handle;		// keep in range, throw no error. 		v = Math.max(this.minValue, v);		v = Math.min(this.maxValue, v);						var rationalValue = v / (this.maxValue - this.minValue);				// this.handle.onbeforedragstart();		if(this.dir == Slider.direction.VERT) {			 			h.moveToY(this.tDist  * (1 - rationalValue));		}		else { 			h.moveToX(this.tDist * rationalValue );		}				this.rationalValue = rationalValue;		this.value = v;	},		slideToY : function(y) {		this.handle.moveToY(y);		this.handle.ondrag();	},		setRationalValue : function(fRat, bOnslide) {		fRat = Math.max(0, fRat);		fRat = Math.min(1, fRat);		this.rationalValue = fRat;				this.setValue(this.rationalValue * (this.maxValue - this.minValue));		if(bOnslide)			this._onslide();	},		_onslide : function() { 		this.value = 0;		var h = this.handle;		var rationalValue = 0;				if(this.dir == Slider.direction.HORZ) {			if(h.el.offsetLeft > 0)				rationalValue = h.el.offsetLeft / this.tDist;			else				rationalValue = 0;		}		else {			if(h.el.offsetTop > 0) {				var distFromBottom = this.tDist - h.el.offsetTop;				rationalValue = distFromBottom / this.tDist;			}			else				rationalValue = 1;		}		this.rationalValue = rationalValue;		this.value = rationalValue * (this.maxValue - this.minValue);		if(this.onslide) this.onslide(); 	}};	/** ClassName functions  ------------------------------------------------------------------------ */var TRIM_EXP = /^\s+|\s+$/g;String.prototype.trim = function(){		return this.replace(TRIM_EXP, "");};var WS_MULT_EXP = /\s\s+/g;String.prototype.normalize = function(){		return this.trim().replace(WS_MULT_EXP, " ");};TokenizedExps = {EXT:/(\.(.[^\.]+)$)/};function getTokenizedExp(token, flag){	var x = TokenizedExps[token];	if(!x)		x = TokenizedExps[token] = new RegExp("(^|\\s)"+token+"($|\\s)", flag);	return x;}function hasToken(s, token){	return getTokenizedExp(token,"").test(s);};function removeClass(el, klass){	el.className = el.className.replace(getTokenizedExp(klass, "g")," ").normalize();}